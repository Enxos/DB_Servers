Startup:

cmd

docker start pg2

docker exec -it pg2 psql -U postgres

doskey psql=docker exec -it pg2 psql -U postgres

now it's just psql to connect to the db.

/l


/q


CREATE DATABASE test;

DROP DATABASE test;

\c -- to connect to the db.


CREATE TABLE table_name (
    Column name + data type + constraints if any
)

CREATE TABLE person (
    id INT,
    first_name VARCHAR (50),
    last_name VARCHAR (50),
    gender VARCHAR (7),
    date of birth TIMESTAMP
);

DROP TABLE person;

CREATE TABLE person (
    id BIGSERIAL NOT NULL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    gender VARCHAR (6) NOT NULL,
    date_of_birth DATE NOT NULL);

Datatypes:
https://www.postgresql.org/docs/current/datatype.html


\d -- to describe teh db, or specific tables for example.
\d table_name -- to give a list and info of it.

\dt gives a list of only the tables.

add the email column with varchar 150 to the person table.

INSERT INTO person (
    first_name,
    last_name,
    gender,
    date_of_birth)
VALUES ('Anne','Smith','Female',DATE'1988-01-09');

INSERT INTO person (
    first_name,
    last_name,
    gender,
    date_of_birth,
    email)
VALUES ('Jake','Jones','Male',DATE'1990-01-10','jake@gmail.com');

for the email colummn:
ALTER TABLE table_name
ADD COLUMN new_column_name data_type constraint;

ALTER TABLE table_name
ALTER [ COLUMN ] column_name SET ( attribute_option = value [, ... ] )



Solution for the gender problem:

ALTER TABLE person DROP gender;
ALTER TABLE person ADD gender VARCHAR (6) NOT NULL;
ALTER TABLE person DROP date_of_birth;
ALTER TABLE person ADD date_of_birth date NOT NULL;
ALTER TABLE person ADD email varchar (40);

SELECT * FROM person
test-# ;
 id | first_name | last_name | gender | date_of_birth |     email
----+------------+-----------+--------+---------------+----------------
  1 | Anne       | Smith     | Female | 1988-01-09    |
  2 | Jake       | Jones     | Male   | 1990-01-10    | jake@gmail.com
(2 rows)

First try editing data in the table:
UPDATE person WHERE gender=Male SET date_of_birth=1990-12-31;
ERROR:  syntax error at or near "WHERE"
LINE 1: UPDATE person WHERE gender=Male SET date_of_birth=1990-12-31...
                      ^
try2:
UPDATE person SET date_of_birth = 1990-12-31 WHERE gender = Male;
ERROR:  column "male" does not exist
try2.1:
LINE 1: ...n SET date_of_birth = 1990-12-31 WHERE person.gender = Male;

try3:
# UPDATE person SET date_of_birth = '1990-12-31' WHERE id = 2;
UPDATE 1
test=# SELECT * FROM person;
 id | first_name | last_name | gender | date_of_birth |     email
----+------------+-----------+--------+---------------+----------------
  1 | Anne       | Smith     | Female | 1988-01-09    |
  2 | Jake       | Jones     | Male   | 1990-12-31    | jake@gmail.com
(2 rows)

http://www.mockaroo.com/ for data generation.

ORDER BY - ASC / DESC;
DISTINCT
WHERE



SELECT COUNT(*) FROM person WHERE gender = 'Male' OR gender = 'Female' AND country_of_birth = 'Poland';


Where good stuff to filter down data in the WHERE clause:
SELECT 1 = 1; -- // Comparison Operator, gives back true or false results.
SELECT 1 >= 2; -- // f as in false.
SELECT 1 <> 2; -- // t as in 1 is NOT equal to 2. // also case sensitive.


LIMIT and OFFSET keyword.

SELECT * FROM person LIMIT 10;
SELECT * FROM person OFFSET 5 LIMIT 5;

FETCH -- // original SQL limit function. as in the SEQUEL Standard.
SELECT * FROM person OFFSET 5 FETCH FIRST 5 ROW ONLY;

IN keyword, array of values, and then returns the querry matching those values.
SELECT * FROM person WHERE country_of_birth IN ('China','Brazil','France');

SELECT * FROM person
WHERE date_of_birth
BETWEEN DATE '2000-01-01' AND '2000-12-31';

SELECT * FROM person WHERE email LIKE '%@google.%';
SELECT * FROM person WHERE email LIKE '________@google.%';
SELECT * FROM person WHERE country_of_birth LIKE 'P%';

SELECT DISTINCT country_of_birth FROM person;
SELECT country_of_birth FROM person GROUP BY country_of_birth;
SELECT country_of_birth, COUNT(*) FROM person GROUP BY country_of_birth ORDER BY country_of_birth;

GROUP BY HAVING
SELECT country_of_birth, COUNT(*) FROM person GROUP BY country_of_birth HAVING COUNT(*) >= 40 ORDER BY country_of_birth;

Aggregate functions:
 - COUNT
 - MAX 
 - MIN
 - SUM

SELECT * FROM car;
SELECT MAX(price) FROM car;
SELECT MIN(price) FROM car;
SELECT AVG(price) FROM car;

SELECT ROUND(AVG(price)) FROM car;

SELECT make, model, MIN(price) FROM car GROUP BY make, model;
SELECT make, MAX(price) FROM car GROUP BY make;

SELECT make, ROUND(AVG(price)) FROM car GROUP BY make;

SELECT SUM(price) FROM car;
SELECT make, SUM(price) FROM car GROUP BY make;

Working with dates:

SELECT NOW();
    - shows current date n time.
SELECT NOW() - INTERVAL '1 YEAR';

SELECT NOW() + INTERVAL '10 DAYS';

SELECT NOW()::DATE + INTERVAL '10 MONTHS';
    - gives the date without hours and such
SELECT (NOW() + INTERVAL '10 MONTHS')::DATE;
    - Gives the same date without hours and without empty timeframe fields.

SELECT NOW();
    - how to get actual year from this:
SELECT EXTRACT (YEAR FROM NOW());
SELECT EXTRACT (MONTH FROM NOW());
SELECT EXTRACT (DAY FROM NOW());
SELECT EXTRACT (DOW FROM NOW()); -- day of the week
SELECT EXTRACT (CENTURY FROM NOW()); -- 21 -> twentyfirst. baby.

SELECT first_name, last_name, gender, country_of_birth, date_of_birth, AGE(NOW(), date_of_birth) AS age FROM person LIMIT 5;

Mukodik:
SELECT AGE(NOW(), date_of_birth) AS age FROM person LIMIT 5;
Now-bol a mostani ev:
SELECT EXTRACT (YEAR FROM NOW());
a now es a date of birth-ok:
SELECT (NOW(), date_of_birth) FROM person LIMIT 5;

Work in progress:
SELECT first_name, last_name, gender, country_of_birth, date_of_birth, EXTRACT AGE (YEAR FROM (NOW(), date_of_birth) AS age FROM person) LIMIT 5;

SELECT AGE(NOW(), date_of_birth) AS age FROM person LIMIT 5;

Google Bard:
SELECT first_name, last_name, DATE_PART('years', AGE(NOW(), date_of_birth)) AS age_in_years FROM person LIMIT 5;


person uniq ID = passport number, makes a perfect primary key.


⌨️ (1:32:43) IN
 ⌨️ (1:35:43) Between
 ⌨️ (1:37:45) Like And iLike
 ⌨️ (1:43:10) Group By
 ⌨️ (1:46:41) Group By Having
 ⌨️ (1:52:08) Adding New Table And Data Using Mockaroo
 ⌨️ (1:55:40) Calculating Min, Max & Average
 ⌨️ (1:59:48) Sum
 ⌨️ (2:01:55) Basics of Arithmetic Operators
 ⌨️ (2:05:59) Arithmetic Operators (ROUND)
 ⌨️ (2:09:43) Alias
 ⌨️ (2:12:32) Coalesce
 ⌨️ (2:16:15) NULLIF
 ⌨️ (2:20:21) Timestamps And Dates Course
 ⌨️ (2:23:21) Adding And Subtracting With Dates
 ⌨️ (2:25:58) Extracting Fields From Timestamp
 ⌨️ (2:27:28) Age Function
 ⌨️ (2:29:24) What Are Primary Keys
 ⌨️ (2:31:23) Understanding Primary Keys
 ⌨️ (2:36:26) Adding Primary Key
 ⌨️ (2:40:55) Unique Constraints
 ⌨️ (2:49:15) Check Constraints
 ⌨️ (2:54:45) How to Delete Records
 ⌨️ (3:01:36) How to Update Records
 ⌨️ (3:05:55) On Conflict Do Nothing
 ⌨️ (3:11:09) Upsert
 ⌨️ (3:16:41) What Is A Relationship/Foreign Keys
 ⌨️ (3:19:48) Adding Relationship Between Tables
 ⌨️ (3:25:04) Updating Foreign Keys Columns
 ⌨️ (3:29:30) Inner Joins
 ⌨️ (3:35:17) Left Joins
 ⌨️ (3:40:53) Deleting Records With Foreign Keys
 ⌨️ (3:47:27) Exporting Query Results to CSV
 ⌨️ (3:50:42) Serial & Sequences
 ⌨️ (3:57:18) Extensions
 ⌨️ (3:59:39) Understanding UUID Data Type
 ⌨️ (4:05:54) UUID As Primary Keys
 ⌨️ (4:16:30) Conclusion